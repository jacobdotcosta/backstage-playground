FROM registry.access.redhat.com/ubi9/nodejs-18
# STAGE 1 - Facilitate caching by filtering for package.json files
# FROM registry.access.redhat.com/ubi9/nodejs-18 AS packages

COPY --chown=1001:0 package.json yarn.lock ./
COPY --chown=1001:0 packages/ packages/

# Remove all files except package.json
RUN find packages \! -name "package.json" -mindepth 2 -maxdepth 2 -exec rm -rf {} \+


# STAGE 2 - Build packages
# FROM packages AS dependencies

# Install yarn, SQLite and build tools. You can skip SQLite & build tools when not needed
USER 0
RUN npm install -g yarn

# RUN microdnf install -y sqlite sqlite-devel && microdnf clean all
# RUN dnf install -y python3 make gcc-c++ gcc gzip openssl && dnf clean all -> FAILS: https://github.com/ChrisSchneider/backstage-openshift-example/issues/1
RUN dnf install -y -q --allowerasing --nobest nodejs-devel nodejs-libs \
  # already installed or installed as deps:
  openssl openssl-devel ca-certificates sqlite sqlite-devel python3 nodejs-packaging gcc-c++ gcc make cmake cpp zlib zlib-devel brotli brotli-devel && \
  dnf update -y && dnf clean all
USER 1001

#RUN yarn build --filter=backend

# Install dependencies
ENV CYPRESS_INSTALL_BINARY=0
# COPY --from=packages /opt/app-root/src/ ./
#COPY /opt/app-root/src/ ./
#RUN --mount=type=cache,target=/opt/app-root/src/.cache/yarn,uid=1001,gid=0 \
#    yarn install --frozen-lockfile --network-timeout 600000

# COPY --chown=1001:0 . .

# Copy the packages
#RUN --mount=type=cache,target=/opt/app-root/src/.cache/yarn,uid=1001,gid=0 \
#    # FAILS => error TS18003: No inputs were found in config file '/opt/app-root/src/tsconfig.json'. Specified 'include' paths were '["packages/*/src","plugins/*/src","plugins/*/dev","plugins/*/migrations"]' and 'exclude' paths were '["node_modules"]'.
#    # As the job is doing yarn tsc before to build the image, this action is not needed => yarn tsc &&\
#    yarn --cwd packages/backend build
# RUN mkdir packages/backend/dist/skeleton packages/backend/dist/bundle \
#     && tar xzf packages/backend/dist/skeleton.tar.gz -C packages/backend/dist/skeleton \
#     && tar xzf packages/backend/dist/bundle.tar.gz -C packages/backend/dist/bundle


# STAGE 3 - Build the serving image and install prod dependencies
# FROM dependencies as build

# Install yarn, SQLite and build tools. You can skip SQLite when not needed
# USER 0
# RUN npm install -g yarn
# RUN dnf install -y sqlite sqlite-devel && dnf clean all
USER 1001


ENV NODE_ENV production

# Copy & install dependencies prepared by the build stage
# COPY --from=build /opt/app-root/src/yarn.lock \
#                   /opt/app-root/src/package.json \
#                   /opt/app-root/src/packages/backend/dist/skeleton/ ./
COPY yarn.lock \
     package.json \
     packages/backend/dist/skeleton.tar.gz ./
RUN tar xzf skeleton.tar.gz && rm skeleton.tar.gz
# RUN --mount=type=cache,from=build,target=/opt/app-root/src/.cache/yarn,uid=1001,gid=0 \
RUN uid=1001,gid=0 \
    yarn install --frozen-lockfile --production --network-timeout 600000

# Copy the built packages from the build stage
# COPY --from=build /opt/app-root/src/packages/backend/dist/bundle/ ./
COPY packages/backend/dist/bundle.tar.gz ./
RUN tar xzf bundle.tar.gz && rm bundle.tar.gz

# Copy any other files that we need at runtime
COPY app-config.yaml ./

EXPOSE 7007

RUN fix-permissions ./

# Launch backstage app
CMD ["node", "packages/backend", "--config", "app-config.yaml"]